---
import Layout from './Layout.astro';
import { formatDate } from '@/utils/date';
import { Image } from 'astro:assets';
import type { CollectionEntry } from 'astro:content';
import CategoryBadge from '@/components/CategoryBadge.astro';
import TagBadge from '@/components/TagBadge.astro';
import ShareButtons from '@/components/ShareButtons.astro';

interface Props {
  post: CollectionEntry<'blog'>;
  readingTime: string;
}

const { post, readingTime } = Astro.props;
const { title, description, pubDate, updatedDate, heroImage, categories, tags, author } = post.data;

const publishedDate = formatDate(pubDate);
const modifiedDate = updatedDate ? formatDate(updatedDate) : null;
---

<Layout title={title} description={description} image={heroImage}>
  <article class="max-w-3xl mx-auto">
    <div class="mb-8 animate-fade-in">
      {categories.length > 0 && (
        <div class="flex flex-wrap gap-2 mb-4">
          {categories.map((category) => (
            <CategoryBadge category={category} />
          ))}
        </div>
      )}
      <h1 class="text-4xl sm:text-5xl font-bold mb-4 leading-tight">{title}</h1>
      <p class="text-xl text-gray-700 dark:text-gray-300 mb-6">{description}</p>
      
      <div class="flex items-center gap-4 text-gray-600 dark:text-gray-400 mb-6">
        <div class="flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
          </svg>
          <span>{publishedDate}</span>
        </div>
        
        <div class="flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          <span>{readingTime}</span>
        </div>
        
        <div class="flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
          </svg>
          <span>{author}</span>
        </div>
      </div>
    </div>
    
    {heroImage && (
      <div class="mb-10 rounded-lg overflow-hidden shadow-lg animate-fade-in">
        <img 
          src={heroImage} 
          alt={`Cover image for ${title}`} 
          class="w-full h-[400px] object-cover"
          transition:name={`hero-${post.slug}`}
        />
      </div>
    )}
    
    <div class="prose dark:prose-invert lg:prose-lg max-w-none mb-10 animate-fade-in">
      <slot />
    </div>
    
    {updatedDate && (
      <div class="text-sm text-gray-600 dark:text-gray-400 italic mb-6">
        Last updated on {modifiedDate}
      </div>
    )}
    
    {tags.length > 0 && (
      <div class="mb-8">
        <h2 class="text-xl font-semibold mb-3">Tags</h2>
        <div class="flex flex-wrap gap-2">
          {tags.map((tag) => (
            <TagBadge tag={tag} />
          ))}
        </div>
      </div>
    )}
    
    <div class="border-t border-gray-200 dark:border-gray-800 pt-6 mb-10">
      <h2 class="text-xl font-semibold mb-4">Share this post</h2>
      <ShareButtons title={title} url={Astro.url.href} />
    </div>
  </article>
</Layout>

<style>
  .animate-fade-in {
    animation: fadeIn 0.6s ease-in;
  }
  
  @keyframes fadeIn {
    0% { opacity: 0; transform: translateY(10px); }
    100% { opacity: 1; transform: translateY(0); }
  }
</style>